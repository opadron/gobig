#! /usr/bin/env bash

cd "$( dirname "$( dirname "$( dirname "$0" )" )" )"

echo ""
echo "PREPARING ENVIRONMENT"
echo ""

source "dev/include/test-env.bash"

set -e

$APT python-dev python-pip cmake

if [ "$FULL_VIRTUALIZATION" '=' "YES" -o "$EMULATION" '=' "YES" ] ; then
    $APT bsdtar            \
         curl              \
         openssh-client    \
         ruby              \
         ruby-childprocess \
         ruby-erubis       \
         ruby-i18n         \
         ruby-log4r        \
         ruby-net-scp      \
         ruby-net-ssh

    VAGRANT_URL="https://releases.hashicorp.com"
    VAGRANT_URL="$VAGRANT_URL/vagrant/1.7.4/vagrant_1.7.4_x86_64.deb"

    curl "$VAGRANT_URL" > vagrant.deb

    $DPKG vagrant.deb

    if [ "$FULL_VIRTUALIZATION" '=' "YES" ] ; then
        $APT virtualbox

    elif [ "$EMULATION" '=' "YES" ] ; then
        $APT bridge-utils    \
             libxslt-dev     \
             libxml2-dev     \
             libvirt-dev     \
             zlib1g-dev      \
             qemu-system-x86 \
             virt-viewer     \
             virtinst        \
             libvirt-bin

             # qemu-kvm        \
             # ubuntu-vm-builder

        vagrant plugin install vagrant-libvirt
        vagrant plugin install vagrant-mutate
        vagrant plugin install vagrant-rekey-ssh

        vagrant box list | grep -q ubuntu/trusty64

        if [ "$?" '!=' '0' ] ; then
            vagrant box add ubuntu/trusty64
        fi

        vagrant mutate ubuntu/trusty64 libvirt --input-provider virtualbox
    fi
fi

$PIP ansible             \
     boto                \
     coverage            \
     flake8              \
     pep8                \
     flake8-docstrings   \
     flake8-blind-except

echo "EMULATION? $EMULATION"
if [ "$EMULATION" '=' "YES" ] ; then
    if virsh net-list &> /dev/null ; then
        true
    else
        echo
        echo "Warning: emulation is enabled, but your current shell lacks"
        echo "permission to use libvirt.  Make sure that you are added to the"
        echo "group with access to libvirt (usually libvirtd) and either"
        echo "log out and relog in, or use sg when running the tests"
        echo
        echo " e.g.: \$ sg - libvirtd \"./dev/scripts/run-tests\""
        echo
    fi
fi

